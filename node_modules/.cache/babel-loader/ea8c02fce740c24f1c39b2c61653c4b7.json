{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Kirill\\\\Documents\\\\GitHub\\\\Kirill_Todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\Kirill\\\\Documents\\\\GitHub\\\\Kirill_Todo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nexport default (function (initialValue) {\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      todos = _useState2[0],\n      setTodos = _useState2[1];\n\n  return {\n    todos: todos,\n    addTodo: function addTodo(todoText) {\n      setTodos([].concat(_toConsumableArray(todos), [todoText]));\n    },\n    deleteTodo: function deleteTodo(todoIndex) {\n      if (todos[todoIndex].checked) {\n        var newTodos = todos.filter(function (_, index) {\n          return index !== todoIndex;\n        });\n        setTodos(newTodos);\n      }\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/Kirill/Documents/GitHub/Kirill_Todo/src/useTodoState.js"],"names":["useState","initialValue","todos","setTodos","addTodo","todoText","deleteTodo","todoIndex","checked","newTodos","filter","_","index"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,gBAAe,UAAAC,YAAY,EAAI;AAAA,kBACHD,QAAQ,CAACC,YAAD,CADL;AAAA;AAAA,MACtBC,KADsB;AAAA,MACfC,QADe;;AAG7B,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAE,iBAAAC,QAAQ,EAAI;AACnBF,MAAAA,QAAQ,8BAAKD,KAAL,IAAYG,QAAZ,GAAR;AACD,KAJI;AAKLC,IAAAA,UAAU,EAAE,oBAAAC,SAAS,EAAI;AACvB,UAAIL,KAAK,CAACK,SAAD,CAAL,CAAiBC,OAArB,EAA8B;AAC5B,YAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAa,UAACC,CAAD,EAAIC,KAAJ;AAAA,iBAAcA,KAAK,KAAKL,SAAxB;AAAA,SAAb,CAAjB;AACAJ,QAAAA,QAAQ,CAACM,QAAD,CAAR;AACD;AAGF;AAZI,GAAP;AAcD,CAjBD","sourcesContent":["import { useState } from 'react';\r\n\r\nexport default initialValue => {\r\n  const [todos, setTodos] = useState(initialValue);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: todoText => {\r\n      setTodos([...todos, todoText]);\r\n    },\r\n    deleteTodo: todoIndex => {\r\n      if (todos[todoIndex].checked) {\r\n        const newTodos = todos.filter((_, index) => index !== todoIndex);\r\n        setTodos(newTodos);\r\n      }\r\n\r\n      \r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}